name: Node.js CI/CD

on:
  push:
    branches:
      - main
      - develop
      - feature/*
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  test_and_lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies via npm ci
        run: npm ci

      - name: Lint Code
        run: npm run lint --if-present

      - name: Save ESLint report
        run: npm run lint > eslint-report.txt || true

      - name: Upload ESLint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: eslint-results
          path: eslint-report.txt

      - name: Run Tests
        run: npm test

      - name: Run Coverage
        run: npm run coverage --if-present

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Security Check (npm audit)
        run: npm audit --audit-level=moderate

  build:
    needs: test_and_lint
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies via npm ci
        run: npm ci

      - name: Build project
        run: npm run build --if-present

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/ 

  docker_build_and_push:
    needs: build
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && success()
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine Docker tag
        id: tag
        run: |
          echo "DOCKER_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "DOCKER_TAG=latest" >> $GITHUB_ENV
          fi

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION_TAG="${GITHUB_REF#refs/tags/}"
            VERSION_TAG="${VERSION_TAG#v}"
            echo "DOCKER_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          fi

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:${{ env.DOCKER_TAG }} .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:${{ env.DOCKER_TAG }}
