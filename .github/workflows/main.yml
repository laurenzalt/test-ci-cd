name: Node.js CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        run: npm install
      - name: Lint Code
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        run: npm install
      - name: Run Tests
        run: npm test
      - name: Run Coverage (optional)
        run: NODE_ENV=test npm run coverage
      - name: Upload Coverage Report (optional)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        run: npm install
      - name: Security Check (npm audit)
        run: npm audit --audit-level=moderate

  docker_build_and_push:
    needs:
      - lint
      - test
      - audit
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:${{ github.sha }} .
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:${{ github.sha }}

  deploy:
    needs: docker_build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Deploy to DigitalOcean Droplet via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DIGITALOCEAN_IP }}
          username: ${{ secrets.DIGITALOCEAN_USER }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            echo "Pulling new Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:${{ github.sha }}
            echo "Stopping and removing old container (if exists)..."
            docker stop ci-cd-demo || true
            docker rm ci-cd-demo || true
            echo "Starting new container..."
            docker run -d --name ci-cd-demo -p 80:3000 ${{ secrets.DOCKER_USERNAME }}/ci-cd-demo:${{ github.sha }}
